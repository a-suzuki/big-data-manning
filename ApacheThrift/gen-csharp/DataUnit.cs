/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class DataUnit : TBase
{
  private PersonProperty _person_property;
  private PageProperty _page_property;
  private EquivEdge _equiv;
  private PageViewEdge _page_view;

  public PersonProperty Person_property
  {
    get
    {
      return _person_property;
    }
    set
    {
      __isset.person_property = true;
      this._person_property = value;
    }
  }

  public PageProperty Page_property
  {
    get
    {
      return _page_property;
    }
    set
    {
      __isset.page_property = true;
      this._page_property = value;
    }
  }

  public EquivEdge Equiv
  {
    get
    {
      return _equiv;
    }
    set
    {
      __isset.equiv = true;
      this._equiv = value;
    }
  }

  public PageViewEdge Page_view
  {
    get
    {
      return _page_view;
    }
    set
    {
      __isset.page_view = true;
      this._page_view = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool person_property;
    public bool page_property;
    public bool equiv;
    public bool page_view;
  }

  public DataUnit() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Person_property = new PersonProperty();
              Person_property.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Page_property = new PageProperty();
              Page_property.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Equiv = new EquivEdge();
              Equiv.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Page_view = new PageViewEdge();
              Page_view.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("DataUnit");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Person_property != null && __isset.person_property) {
        field.Name = "person_property";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Person_property.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Page_property != null && __isset.page_property) {
        field.Name = "page_property";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Page_property.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Equiv != null && __isset.equiv) {
        field.Name = "equiv";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Equiv.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Page_view != null && __isset.page_view) {
        field.Name = "page_view";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Page_view.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("DataUnit(");
    bool __first = true;
    if (Person_property != null && __isset.person_property) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Person_property: ");
      __sb.Append(Person_property== null ? "<null>" : Person_property.ToString());
    }
    if (Page_property != null && __isset.page_property) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Page_property: ");
      __sb.Append(Page_property== null ? "<null>" : Page_property.ToString());
    }
    if (Equiv != null && __isset.equiv) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Equiv: ");
      __sb.Append(Equiv== null ? "<null>" : Equiv.ToString());
    }
    if (Page_view != null && __isset.page_view) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Page_view: ");
      __sb.Append(Page_view== null ? "<null>" : Page_view.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

