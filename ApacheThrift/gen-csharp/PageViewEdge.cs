/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class PageViewEdge : TBase
{

  public PersonID Person { get; set; }

  public PageID Page { get; set; }

  public long Nonce { get; set; }

  public PageViewEdge() {
  }

  public PageViewEdge(PersonID person, PageID page, long nonce) : this() {
    this.Person = person;
    this.Page = page;
    this.Nonce = nonce;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_person = false;
      bool isset_page = false;
      bool isset_nonce = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Person = new PersonID();
              Person.Read(iprot);
              isset_person = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Page = new PageID();
              Page.Read(iprot);
              isset_page = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Nonce = iprot.ReadI64();
              isset_nonce = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_person)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_page)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_nonce)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("PageViewEdge");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "person";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Person.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "page";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      Page.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "nonce";
      field.Type = TType.I64;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Nonce);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("PageViewEdge(");
    __sb.Append(", Person: ");
    __sb.Append(Person== null ? "<null>" : Person.ToString());
    __sb.Append(", Page: ");
    __sb.Append(Page== null ? "<null>" : Page.ToString());
    __sb.Append(", Nonce: ");
    __sb.Append(Nonce);
    __sb.Append(")");
    return __sb.ToString();
  }

}

