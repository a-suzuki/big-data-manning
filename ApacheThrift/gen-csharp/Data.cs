/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Data : TBase
{

  public Pedigree Pedigree { get; set; }

  public DataUnit Dataunit { get; set; }

  public Data() {
  }

  public Data(Pedigree pedigree, DataUnit dataunit) : this() {
    this.Pedigree = pedigree;
    this.Dataunit = dataunit;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_pedigree = false;
      bool isset_dataunit = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Pedigree = new Pedigree();
              Pedigree.Read(iprot);
              isset_pedigree = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Dataunit = new DataUnit();
              Dataunit.Read(iprot);
              isset_dataunit = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_pedigree)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_dataunit)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Data");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "pedigree";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Pedigree.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "dataunit";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      Dataunit.Write(oprot);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Data(");
    __sb.Append(", Pedigree: ");
    __sb.Append(Pedigree== null ? "<null>" : Pedigree.ToString());
    __sb.Append(", Dataunit: ");
    __sb.Append(Dataunit== null ? "<null>" : Dataunit.ToString());
    __sb.Append(")");
    return __sb.ToString();
  }

}

